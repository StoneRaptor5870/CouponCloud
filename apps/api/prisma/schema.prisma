generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String?
  image         String?
  Credentials   Credentials?
  AuthProvider  AuthProvider?
  Admin         Admin?
  Manager       Manager?
  Customer      Customer?
  CouponHistory CouponHistory[]
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String?
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id          String   @id @default(uuid())
  userId      String   @unique
  displayName String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupons     Coupon[] @relation("CustomerCoupons")
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Credentials {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AuthProvider {
  id     String           @id @default(uuid())
  type   AuthProviderType
  userId String           @unique
  user   User             @relation(fields: [userId], references: [id])
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

model Company {
  id          String    @id @default(uuid())
  coupons     Coupon[]
  managers    Manager[]
  displayName String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Coupon {
  id            String          @id @default(uuid())
  code          String          @unique
  description   String?
  discount      Float
  expiryDate    DateTime
  status        CouponStatus    @default(ACTIVE)
  companyId     String
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerId    String?
  customer      Customer?       @relation("CustomerCoupons", fields: [customerId], references: [id], onDelete: SetNull)
  reviews       Review[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CouponHistory CouponHistory[]
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  REDEEMED
  REVOKED
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  flagged    Boolean  @default(false)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  couponId   String
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CouponHistory {
  id          String       @id @default(uuid())
  couponId    String
  coupon      Coupon       @relation(fields: [couponId], references: [id])
  action      CouponAction
  timestamp   DateTime     @default(now())
  performedBy String
  user        User         @relation(fields: [performedBy], references: [id])
}

enum CouponAction {
  CREATED
  ASSIGNED
  REDEEMED
  EXPIRED
  REVOKED
}

model ExpiredCoupon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discount    Float
  expiryDate  DateTime
  companyId   String
  archivedAt  DateTime @default(now())
}
