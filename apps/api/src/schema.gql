# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  name: String
  image: String
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginOutput {
  token: String!
}

type Admin {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: User
}

type Manager {
  displayName: String
  companyId: String
  id: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  company: Company
}

type Company {
  description: String
  displayName: String
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  managers: [Manager!]!
}

type Customer {
  id: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
}

type Query {
  whoami: User!
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Float, skip: Float): [User!]!
  user(where: UserWhereUniqueInput!): User!
  admins(distinct: [AdminScalarFieldEnum!], where: AdminWhereInput, orderBy: [AdminOrderByWithRelationInput!], cursor: AdminWhereUniqueInput, take: Float, skip: Float): [Admin!]!
  admin(where: AdminWhereUniqueInput!): Admin!
  managers(distinct: [ManagerScalarFieldEnum!], where: ManagerWhereInput, orderBy: [ManagerOrderByWithRelationInput!], cursor: ManagerWhereUniqueInput, take: Float, skip: Float): [Manager!]!
  manager(where: ManagerWhereUniqueInput!): Manager!
  customers(distinct: [CustomerScalarFieldEnum!], where: CustomerWhereInput, orderBy: [CustomerOrderByWithRelationInput!], cursor: CustomerWhereUniqueInput, take: Float, skip: Float): [Customer!]!
  customer(where: CustomerWhereUniqueInput!): Customer!
  companies(distinct: [CompanyScalarFieldEnum!], where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Float, skip: Float): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company!
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserWhereUniqueInput {
  id: String!
}

enum AdminScalarFieldEnum {
  id
  userId
  createdAt
  updatedAt
}

input AdminWhereInput {
  id: StringFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input AdminOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input AdminWhereUniqueInput {
  id: String!
}

enum ManagerScalarFieldEnum {
  id
  userId
  displayName
  companyId
  createdAt
  updatedAt
}

input ManagerWhereInput {
  displayName: StringFilter
  id: StringFilter
  userId: StringFilter
  companyId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  company: CompanyRelationFilter
  AND: [ManagerWhereInput!]
  OR: [ManagerWhereInput!]
  NOT: [ManagerWhereInput!]
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  id: StringFilter
  name: StringFilter
  displayName: StringFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  managers: ManagerListRelationFilter
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input ManagerListRelationFilter {
  every: ManagerWhereInput
  some: ManagerWhereInput
  none: ManagerWhereInput
}

input ManagerOrderByWithRelationInput {
  displayName: SortOrder
  id: SortOrder
  userId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  company: CompanyOrderByWithRelationInput
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  description: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  managers: ManagerOrderByRelationAggregateInput
}

input ManagerOrderByRelationAggregateInput {
  _count: SortOrder
}

input ManagerWhereUniqueInput {
  id: String!
}

enum CustomerScalarFieldEnum {
  id
  userId
  createdAt
  updatedAt
}

input CustomerWhereInput {
  id: StringFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input CustomerWhereUniqueInput {
  id: String!
}

enum CompanyScalarFieldEnum {
  id
  name
  displayName
  description
  createdAt
  updatedAt
}

input CompanyWhereUniqueInput {
  id: String!
}

type Mutation {
  createUserWithCredentials(createUserWithCredentialsInput: RegisterWithCredentialsInput!): User!
  registerWithProvider(registerWithProviderInput: RegisterWithProviderInput!): User!
  login(loginInput: LoginInput!): LoginOutput!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput!): User!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  removeAdmin(where: AdminWhereUniqueInput!): Admin!
  createManager(createManagerInput: CreateManagerInput!): Manager!
  updateManager(updateManagerInput: UpdateManagerInput!): Manager!
  removeManager(where: ManagerWhereUniqueInput!): Manager!
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  updateCustomer(updateCustomerInput: UpdateCustomerInput!): Customer!
  removeCustomer(where: CustomerWhereUniqueInput!): Customer!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  removeCompany(where: CompanyWhereUniqueInput!): Company!
}

input RegisterWithCredentialsInput {
  name: String!
  email: String!
  password: String!
  image: String
}

input RegisterWithProviderInput {
  name: String
  image: String
  id: String!
  type: AuthProviderType!
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  id: String!
}

input CreateAdminInput {
  userId: String!
}

input UpdateAdminInput {
  userId: String
  id: String!
}

input CreateManagerInput {
  companyId: String
  userId: String!
}

input UpdateManagerInput {
  companyId: String
  userId: String
  id: String!
}

input CreateCustomerInput {
  userId: String!
}

input UpdateCustomerInput {
  userId: String
  id: String!
}

input CreateCompanyInput {
  id: String!
  name: String!
}

input UpdateCompanyInput {
  id: String!
  name: String
}